package org.gravel.support.parser;

/*
	This file is automatically generated. See FX.TService.TService class>>generateWorkspaces
	(C) CosmoCows B.V.
*/

import java.math.BigDecimal;
import java.math.BigInteger;
import org.gravel.support.jvm.NonLocalReturn;
import org.gravel.support.parser.AbstractClassDiff;
import org.gravel.support.parser.AbstractClassDiff.AbstractClassDiff_Factory;
import org.gravel.support.parser.NewClassDiff;
import org.gravel.support.parser.DiffVisitor;
import org.gravel.support.parser.SystemNode;
import org.gravel.support.parser.Diff;
import org.gravel.support.parser.UpdateClassDiff;

public class BranchDiff extends AbstractClassDiff implements Cloneable {

	public static BranchDiff_Factory factory = new BranchDiff_Factory();

	AbstractClassDiff[] _children;

	NewClassDiff _root;

	public static class BranchDiff_Factory extends AbstractClassDiff_Factory {

		public BranchDiff basicNew() {
			BranchDiff newInstance = new BranchDiff();
			newInstance.initialize();
			return newInstance;
		}

		public BranchDiff root_children_(final NewClassDiff _anExtendClassDiff, final AbstractClassDiff[] _anArray) {
			return this.basicNew().initializeRoot_children_(_anExtendClassDiff, _anArray);
		}
	}

	static public BranchDiff _root_children_(Object receiver, final NewClassDiff _anExtendClassDiff, final AbstractClassDiff[] _anArray) {
		return factory.root_children_(_anExtendClassDiff, _anArray);
	}

	@Override
	public DiffVisitor accept_(final DiffVisitor _visitor) {
		return _visitor.visitBranchDiff_(this);
	}

	@Override
	public SystemNode applyOnSystemNode_(final SystemNode _aSystemNode) {
		return ((SystemNode) org.gravel.support.jvm.ArrayExtensions.inject_into_(_children, _root.applyOnSystemNode_(_aSystemNode), ((org.gravel.support.jvm.Block2<SystemNode, SystemNode, Diff>) (new org.gravel.support.jvm.Block2<SystemNode, SystemNode, Diff>() {

			@Override
			public SystemNode value_value_(final SystemNode _n, final Diff _e) {
				return (SystemNode) _e.applyOnSystemNode_(_n);
			}
		}))));
	}

	@Override
	public BranchDiff beStatic() {
		return this.copy().pvtSetStatic_(true);
	}

	@Override
	public BranchDiff beStatic_(final boolean _aBoolean) {
		if (_aBoolean && (!this.isStatic())) {
			return BranchDiff.this.beStatic();
		}
		return this;
	}

	public AbstractClassDiff[] children() {
		return _children;
	}

	@Override
	public Integer classDiffsSize() {
		return ((Integer) org.gravel.support.jvm.ArrayExtensions.inject_into_(_children, _root.classDiffsSize(), ((org.gravel.support.jvm.Block2<Integer, Integer, AbstractClassDiff>) (new org.gravel.support.jvm.Block2<Integer, Integer, AbstractClassDiff>() {

			@Override
			public Integer value_value_(final Integer _s, final AbstractClassDiff _each) {
				return (Integer) _s + _each.classDiffsSize();
			}
		}))));
	}

	public BranchDiff copy() {
		try {
			BranchDiff _temp1 = (BranchDiff) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public BranchDiff_Factory factory() {
		return factory;
	}

	@Override
	public BranchDiff initialize() {
		super.initialize();
		_isStatic = this.isStaticDefault();
		_cache = new java.util.IdentityHashMap<AbstractClassDiff, Boolean>();
		return this;
	}

	public BranchDiff initializeRoot_children_(final NewClassDiff _anExtendClassDiff, final AbstractClassDiff[] _anArray) {
		_root = _anExtendClassDiff.beStatic_(org.gravel.support.jvm.ArrayExtensions.anySatisfy_(_anArray, new org.gravel.support.jvm.Predicate1<AbstractClassDiff>() {

			@Override
			public boolean value_(final AbstractClassDiff _elem) {
				return _elem.isStatic();
			}
		}));
		_children = _anArray;
		this.initialize();
		return this;
	}

	@Override
	public boolean isPrereqOrDependent_(final AbstractClassDiff _anAbstractClassDiff) {
		return _root.isPrereqOrDependent_(_anAbstractClassDiff) || org.gravel.support.jvm.ArrayExtensions.anySatisfy_(_children, new org.gravel.support.jvm.Predicate1<AbstractClassDiff>() {

			@Override
			public boolean value_(final AbstractClassDiff _ch) {
				return _ch.isPrereqOrDependent_(_anAbstractClassDiff);
			}
		});
	}

	@Override
	public boolean isStaticDefault() {
		return (_root != null) && (_root.isStatic() || org.gravel.support.jvm.ArrayExtensions.anySatisfy_(_children, new org.gravel.support.jvm.Predicate1<AbstractClassDiff>() {

			@Override
			public boolean value_(final AbstractClassDiff _elem) {
				return _elem.isStatic();
			}
		}));
	}

	@Override
	public BranchDiff printDescriptionOn_(final StringBuilder _aStream) {
		_aStream.append("root: (");
		_aStream.append(_root.toString());
		_aStream.append(") children: (");
		_aStream.append(_children.toString());
		_aStream.append(")");
		return this;
	}

	public BranchDiff pvtSetChildren_(final AbstractClassDiff[] _anArray) {
		_isStatic = _isStatic || org.gravel.support.jvm.ArrayExtensions.anySatisfy_(_anArray, new org.gravel.support.jvm.Predicate1<AbstractClassDiff>() {

			@Override
			public boolean value_(final AbstractClassDiff _elem) {
				return _elem.isStatic();
			}
		});
		_root = _root.beStatic_(_isStatic);
		_children = _anArray;
		return this;
	}

	public BranchDiff pvtSetRoot_(final NewClassDiff _aRoot) {
		_root = _aRoot;
		return this;
	}

	@Override
	public BranchDiff pvtSetStatic_(final boolean _aBoolean) {
		_isStatic = _aBoolean;
		return this;
	}

	public NewClassDiff root() {
		return _root;
	}

	@Override
	public Diff withBranchDiff_(final BranchDiff _aBranchDiff) {
		if (!this.cachedIsPrereqOrDependent_(_aBranchDiff)) {
			return ClassDiffs.factory.with_with_(BranchDiff.this, _aBranchDiff);
		}
		if (org.gravel.support.jvm.ObjectExtensions.equals_(_aBranchDiff.root().classNode().superclassReference(), _root.reference())) {
			return BranchDiff.this.withSubclassDiff_(_aBranchDiff);
		}
		if (org.gravel.support.jvm.ObjectExtensions.equals_(_root.classNode().superclassReference(), _aBranchDiff.root().reference())) {
			return _aBranchDiff.withSubclassDiff_(BranchDiff.this);
		}
		return ((Diff) org.gravel.support.jvm.ArrayExtensions.inject_into_(_children, _root.withDiff_(_aBranchDiff), ((org.gravel.support.jvm.Block2<Diff, Diff, AbstractClassDiff>) (new org.gravel.support.jvm.Block2<Diff, Diff, AbstractClassDiff>() {

			@Override
			public Diff value_value_(final Diff _s, final AbstractClassDiff _e) {
				return (Diff) _s.withDiff_(_e);
			}
		}))));
	}

	public BranchDiff withChildren_(final AbstractClassDiff[] _anArray) {
		return this.copy().pvtSetChildren_(_anArray);
	}

	@Override
	public Diff withDiff_(final Diff _aDiff) {
		return _aDiff.withBranchDiff_(this);
	}

	@Override
	public AbstractClassDiff withNewClassDiff_(final NewClassDiff _aNewClassDiff) {
		if (!this.cachedIsPrereqOrDependent_(_aNewClassDiff)) {
			return ((AbstractClassDiff) ClassDiffs.factory.with_with_(BranchDiff.this, _aNewClassDiff));
		}
		if (org.gravel.support.jvm.ObjectExtensions.equals_(_aNewClassDiff.classNode().superclassReference(), _root.reference())) {
			return BranchDiff.this.withSubclassDiff_(_aNewClassDiff);
		}
		if (org.gravel.support.jvm.ObjectExtensions.equals_(_root.classNode().superclassReference(), _aNewClassDiff.reference())) {
			return ((AbstractClassDiff) _aNewClassDiff.withSubclassDiff_(BranchDiff.this));
		}
		return this.withChildren_(org.gravel.support.jvm.ArrayExtensions.collect_(_children, ((org.gravel.support.jvm.Block1<AbstractClassDiff, AbstractClassDiff>) (new org.gravel.support.jvm.Block1<AbstractClassDiff, AbstractClassDiff>() {

			@Override
			public AbstractClassDiff value_(final AbstractClassDiff _ch) {
				if (_ch.isPrereqOrDependent_(_aNewClassDiff)) {
					return _ch.withNewClassDiff_(_aNewClassDiff);
				} else {
					return _ch;
				}
			}
		}))));
	}

	public BranchDiff withRoot_(final NewClassDiff _aRoot) {
		return this.copy().pvtSetRoot_(_aRoot);
	}

	public BranchDiff withSubclassDiff_(final AbstractClassDiff _aClassDiff) {
		return this.withChildren_(org.gravel.support.jvm.ArrayExtensions.copyWith_(_children, _aClassDiff));
	}

	@Override
	public Diff withUpdateClassDiff_(final UpdateClassDiff _anUpdateClassDiff) {
		if (org.gravel.support.jvm.ObjectExtensions.equals_(_root.reference(), _anUpdateClassDiff.reference())) {
			return BranchDiff.this.withRoot_(((NewClassDiff) _root.withDiff_(_anUpdateClassDiff)));
		}
		org.gravel.support.jvm.ObjectExtensions.halt(this);
		return this;
	}
}

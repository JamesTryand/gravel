package org.gravel.support.parser;

/*
	This file is automatically generated. See FX.TService.TService class>>generateWorkspaces
	(C) CosmoCows B.V.
*/

import java.math.BigDecimal;
import java.math.BigInteger;
import org.gravel.support.jvm.NonLocalReturn;
import org.gravel.support.parser.Formatter;
import org.gravel.support.parser.Expression;
import org.gravel.support.parser.Reference;
import org.gravel.support.parser.PackageNode;
import org.gravel.support.parser.ClassNode;
import org.gravel.support.parser.NamespaceNode;
import org.gravel.support.parser.VariableNode;
import org.gravel.support.parser.SharedDeclarationNode;
import org.gravel.support.parser.Node;
import org.gravel.support.parser.VariableDeclarationNode;
import java.util.Map;
import java.util.Map.*;
import org.gravel.support.parser.MethodNode;
import java.util.HashMap;
import org.gravel.support.parser.AbsoluteReference;

public class DiskClassWriter extends Object implements Cloneable {

	public static DiskClassWriter_Factory factory = new DiskClassWriter_Factory();

	Formatter _formatter;

	java.io.File _root;

	public static class DiskClassWriter_Factory extends org.gravel.support.jvm.SmalltalkFactory {

		public DiskClassWriter basicNew() {
			DiskClassWriter newInstance = new DiskClassWriter();
			newInstance.initialize();
			return newInstance;
		}

		public DiskClassWriter root_formatter_(final java.io.File _aFilename, final Formatter _aVWFormatter) {
			return this.basicNew().initializeRoot_formatter_(_aFilename, _aVWFormatter);
		}
	}

	static public DiskClassWriter _root_formatter_(Object receiver, final java.io.File _aFilename, final Formatter _aVWFormatter) {
		return factory.root_formatter_(_aFilename, _aVWFormatter);
	}

	public Expression asLiteralNode_(final String _aValue) {
		if (_aValue == null) {
			return NilLiteralNode.factory.basicNew();
		}
		return StringLiteralNode.factory.value_(_aValue);
	}

	public DiskClassWriter copy() {
		try {
			DiskClassWriter _temp1 = (DiskClassWriter) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public DiskClassWriter_Factory factory() {
		return factory;
	}

	public Formatter formatter() {
		return _formatter;
	}

	public DiskClassWriter initialize() {
		return this;
	}

	public DiskClassWriter initializeRoot_formatter_(final java.io.File _anUnixFilename, final Formatter _aVWFormatter) {
		_root = _anUnixFilename;
		_formatter = _aVWFormatter;
		this.initialize();
		return this;
	}

	public Expression initializerSource_(final Expression _anExpression) {
		if (_anExpression == null) {
			return NilLiteralNode.factory.basicNew();
		}
		return this.asLiteralNode_(_anExpression.sourceString());
	}

	public DiskClassWriter postCopy() {
		return this;
	}

	public Expression referenceAsLiteralNode_(final Reference _aValue) {
		if (_aValue == null) {
			return NilLiteralNode.factory.basicNew();
		}
		return StringLiteralNode.factory.value_(_aValue.toString());
	}

	public java.io.File root() {
		return _root;
	}

	public DiskClassWriter writeClass_in_(final ClassNode _aClassNode, final java.io.File _aFilename) {
		final java.io.File _nsFn;
		final java.io.File _clFn;
		final StringBuilder _str;
		final VariableNode _reader;
		_nsFn = ((java.io.File) org.gravel.support.jvm.ArrayExtensions.inject_into_(_aClassNode.reference().namespace().path(), _aFilename, ((org.gravel.support.jvm.Block2<java.io.File, java.io.File, org.gravel.core.Symbol>) (new org.gravel.support.jvm.Block2<java.io.File, java.io.File, org.gravel.core.Symbol>() {

			@Override
			public java.io.File value_value_(final java.io.File _fn, final org.gravel.core.Symbol _each) {
				return (java.io.File) new java.io.File(_fn, _each.asString());
			}
		}))));
		_nsFn.mkdirs();
		_clFn = new java.io.File(_nsFn, _aClassNode.reference().name().asString() + ".st");
		_str = org.gravel.support.jvm.WriteStreamFactory.on_(new String());
		_reader = VariableNode.factory.name_("reader");
		if (_aClassNode.isExtension()) {
			DiskClassWriter.this.writeDirective_on_(_reader.send_with_(_aClassNode.isTrait() ? "extendTrait:" : "extendClass:", DiskClassWriter.this.asLiteralNode_(_aClassNode.name().asString())), _str);
		} else {
			DiskClassWriter.this.writeDirective_on_(_reader.send_with_with_(_aClassNode.isTrait() ? "defineTrait:superclass:" : "defineClass:superclass:", DiskClassWriter.this.asLiteralNode_(_aClassNode.name().asString()), DiskClassWriter.this.referenceAsLiteralNode_(_aClassNode.superclassReference())), _str);
			for (final SharedDeclarationNode _sv : _aClassNode.metaclassNode().sharedVariables()) {
				DiskClassWriter.this.writeDirective_on_(_reader.send_with_with_("defineSharedVariable:init:", DiskClassWriter.this.asLiteralNode_(_sv.name()), DiskClassWriter.this.initializerSource_(_sv.initializer())), _str);
			}
		}
		for (final Node _each : TraitUsageToDirectiveConverter.factory.visit_(_aClassNode.traitUsage())) {
			DiskClassWriter.this.writeDirective_on_(_each, _str);
		}
		for (final VariableDeclarationNode _each : _aClassNode.instVars()) {
			DiskClassWriter.this.writeDirective_on_(_reader.send_with_("addInstVar:", DiskClassWriter.this.asLiteralNode_(_each.name())), _str);
		}
		for (final VariableDeclarationNode _each : _aClassNode.metaclassNode().instVars()) {
			DiskClassWriter.this.writeDirective_on_(_reader.send_with_("addClassInstVar:", DiskClassWriter.this.asLiteralNode_(_each.name())), _str);
		}
		for (final Map.Entry<String, String> _temp1 : _aClassNode.properties().entrySet()) {
			String _k = _temp1.getKey();
			String _v = _temp1.getValue();
			DiskClassWriter.this.writeDirective_on_(_reader.send_with_with_("propertyAt:put:", DiskClassWriter.this.asLiteralNode_(_k), DiskClassWriter.this.asLiteralNode_(_v)), _str);
		}
		for (final MethodNode _each : _aClassNode.methods()) {
			DiskClassWriter.this.writeDirective_on_(_reader.send_with_("addMethod:", DiskClassWriter.this.asLiteralNode_(_each.protocol())), _str);
			DiskClassWriter.this.writeMethod_on_(_each, _str);
		}
		for (final MethodNode _each : _aClassNode.metaclassNode().methods()) {
			DiskClassWriter.this.writeDirective_on_(_reader.send_with_("addClassMethod:", DiskClassWriter.this.asLiteralNode_(_each.protocol())), _str);
			DiskClassWriter.this.writeMethod_on_(_each, _str);
		}
		org.gravel.support.jvm.StringExtensions.writeToFile_(_str.toString(), _clFn);
		return this;
	}

	public DiskClassWriter writeDirective_on_(final Node _aNode, final StringBuilder _aWriteStream) {
		_aWriteStream.append(_aNode.sourceString());
		_aWriteStream.append('\n');
		_aWriteStream.append('!');
		_aWriteStream.append('\n');
		return this;
	}

	public DiskClassWriter writeMethod_on_(final Node _aNode, final StringBuilder _aWriteStream) {
		_aWriteStream.append(_formatter.format_(_aNode));
		_aWriteStream.append('\n');
		_aWriteStream.append('!');
		_aWriteStream.append('\n');
		return this;
	}

	public DiskClassWriter writeNamespace_in_(final NamespaceNode _aNamespaceNode, final java.io.File _aFilename) {
		final java.io.File _nsFn;
		final String _json;
		final Map<String, Object> _dict;
		final String[] _privateImports;
		final String[] _publicImports;
		final Map<String, String> _sharedVariables;
		_nsFn = ((java.io.File) org.gravel.support.jvm.ArrayExtensions.inject_into_(_aNamespaceNode.reference().path(), _aFilename, ((org.gravel.support.jvm.Block2<java.io.File, java.io.File, org.gravel.core.Symbol>) (new org.gravel.support.jvm.Block2<java.io.File, java.io.File, org.gravel.core.Symbol>() {

			@Override
			public java.io.File value_value_(final java.io.File _fn, final org.gravel.core.Symbol _each) {
				return (java.io.File) new java.io.File(_fn, _each.asString());
			}
		}))));
		_nsFn.mkdirs();
		_dict = new java.util.HashMap<String, Object>();
		_privateImports = org.gravel.support.jvm.ArrayExtensions.collect_(_aNamespaceNode.privateImports(), ((org.gravel.support.jvm.Block1<String, AbsoluteReference>) (new org.gravel.support.jvm.Block1<String, AbsoluteReference>() {

			@Override
			public String value_(final AbsoluteReference _each) {
				return (String) _each.toString();
			}
		})));
		_dict.put("privateImports", _privateImports);
		_publicImports = org.gravel.support.jvm.ArrayExtensions.collect_(_aNamespaceNode.publicImports(), ((org.gravel.support.jvm.Block1<String, AbsoluteReference>) (new org.gravel.support.jvm.Block1<String, AbsoluteReference>() {

			@Override
			public String value_(final AbsoluteReference _each) {
				return (String) _each.toString();
			}
		})));
		_dict.put("publicImports", _publicImports);
		_sharedVariables = new java.util.HashMap<String, String>();
		for (final SharedDeclarationNode _each : _aNamespaceNode.sharedVariables()) {
			_sharedVariables.put(_each.name(), _each.initializer() == null ? null : _each.initializer().sourceString());
		}
		_dict.put("sharedVariables", _sharedVariables);
		_json = org.gravel.support.jvm.DictionaryExtensions.asJSON(_dict);
		org.gravel.support.jvm.StringExtensions.writeToFile_(_json, new java.io.File(_nsFn, "properties.json"));
		return this;
	}

	public DiskClassWriter write_(final PackageNode _aPackageNode) {
		final java.io.File _pkgRoot;
		_pkgRoot = new java.io.File(_root, _aPackageNode.name().asString());
		_pkgRoot.mkdirs();
		for (final ClassNode _cl : _aPackageNode.classes()) {
			DiskClassWriter.this.writeClass_in_(_cl, _pkgRoot);
		}
		for (final NamespaceNode _ns : _aPackageNode.namespaces()) {
			DiskClassWriter.this.writeNamespace_in_(_ns, _pkgRoot);
		}
		return this;
	}
}

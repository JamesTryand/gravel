package org.gravel.support.parser;

/*
	This file is automatically generated. See FX.TService.TService class>>generateWorkspaces
	(C) CosmoCows B.V.
*/

import java.math.BigDecimal;
import java.math.BigInteger;
import org.gravel.support.jvm.NonLocalReturn;
import org.gravel.support.parser.AbstractClassDiff;
import org.gravel.support.parser.AbstractClassDiff.AbstractClassDiff_Factory;
import org.gravel.support.parser.ClassNode;
import org.gravel.support.parser.DiffVisitor;
import org.gravel.support.parser.Reference;
import org.gravel.support.parser.BranchDiff;
import org.gravel.support.parser.Diff;
import org.gravel.support.parser.MethodNode;

abstract public class NewClassDiff extends AbstractClassDiff implements Cloneable {

	public static NewClassDiff_Factory factory = new NewClassDiff_Factory();

	ClassNode _classNode;

	public static class NewClassDiff_Factory extends AbstractClassDiff_Factory {

		public NewClassDiff basicNew() {
			throw new RuntimeException("NewClassDiff is an abstract class");
		}

		public NewClassDiff classNode_(final ClassNode _aClassNode) {
			return ((NewClassDiff) this.basicNew().initializeClassNode_(_aClassNode));
		}
	}

	static public NewClassDiff _classNode_(Object receiver, final ClassNode _aClassNode) {
		return factory.classNode_(_aClassNode);
	}

	@Override
	public DiffVisitor accept_(final DiffVisitor _visitor) {
		return _visitor.visitNewClassDiff_(this);
	}

	@Override
	public NewClassDiff beStatic() {
		return this.copy().pvtSetStatic_(true);
	}

	@Override
	public NewClassDiff beStatic_(final boolean _aBoolean) {
		if (_aBoolean && (!this.isStatic())) {
			return NewClassDiff.this.beStatic();
		}
		return this;
	}

	public ClassNode classNode() {
		return _classNode;
	}

	public NewClassDiff copy() {
		try {
			NewClassDiff _temp1 = (NewClassDiff) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public NewClassDiff_Factory factory() {
		return factory;
	}

	@Override
	public NewClassDiff initialize() {
		super.initialize();
		_isStatic = this.isStaticDefault();
		_cache = new java.util.IdentityHashMap<AbstractClassDiff, Boolean>();
		return this;
	}

	public NewClassDiff initializeClassNode_(final ClassNode _aClassNode) {
		_classNode = _aClassNode;
		this.initialize();
		return this;
	}

	@Override
	public boolean isPrereqOrDependentOfNewClassDiff_(final NewClassDiff _aClassDiff) {
		return org.gravel.support.jvm.ObjectExtensions.equals_(_classNode.superclassReference(), _aClassDiff.reference()) || org.gravel.support.jvm.ObjectExtensions.equals_(this.reference(), _aClassDiff.classNode().superclassReference());
	}

	@Override
	public boolean isPrereqOrDependent_(final AbstractClassDiff _aDiff) {
		return _aDiff.isPrereqOrDependentOfNewClassDiff_(this);
	}

	@Override
	public NewClassDiff printDescriptionOn_(final StringBuilder _aStream) {
		_aStream.append(_classNode.toString());
		return this;
	}

	@Override
	public NewClassDiff pvtSetStatic_(final boolean _aBoolean) {
		_isStatic = _aBoolean;
		return this;
	}

	public Reference reference() {
		return _classNode.reference();
	}

	@Override
	public Diff withBranchDiff_(final BranchDiff _aBranchDiff) {
		return _aBranchDiff.withNewClassDiff_(this);
	}

	@Override
	public Diff withDiff_(final Diff _aDiff) {
		return _aDiff.withNewClassDiff_(this);
	}

	public NewClassDiff withMethodNodes_(final MethodNode[] _anArray) {
		return this.factory().classNode_(_classNode.mergedWithMethods_(_anArray));
	}

	@Override
	public AbstractClassDiff withNewClassDiff_(final NewClassDiff _aNewClassDiff) {
		if (this.cachedIsPrereqOrDependent_(_aNewClassDiff)) {
			if (org.gravel.support.jvm.ObjectExtensions.equals_(_aNewClassDiff.classNode().superclassReference(), NewClassDiff.this.reference())) {
				return ((AbstractClassDiff) NewClassDiff.this.withSubclassDiff_(_aNewClassDiff));
			}
			if (org.gravel.support.jvm.ObjectExtensions.equals_(_classNode.superclassReference(), _aNewClassDiff.reference())) {
				return ((AbstractClassDiff) _aNewClassDiff.withSubclassDiff_(NewClassDiff.this));
			}
			org.gravel.support.jvm.ObjectExtensions.halt(NewClassDiff.this);
		}
		return ((AbstractClassDiff) ClassDiffs.factory.with_with_(this, _aNewClassDiff));
	}

	public Diff withSubclassDiff_(final AbstractClassDiff _anAbstractClassDiff) {
		return BranchDiff.factory.root_children_(this, org.gravel.support.jvm.ArrayFactory.with_(_anAbstractClassDiff));
	}
}

package org.gravel.support.parser;

/*
	This file is automatically generated. See FX.TService.TService class>>generateWorkspaces
	(C) CosmoCows B.V.
*/

import java.math.BigDecimal;
import java.math.BigInteger;
import org.gravel.support.jvm.NonLocalReturn;
import org.gravel.support.parser.NewClassDiff;
import org.gravel.support.parser.NewClassDiff.NewClassDiff_Factory;
import org.gravel.support.parser.ClassNode;
import org.gravel.support.parser.DiffVisitor;
import org.gravel.support.parser.SystemNode;
import org.gravel.support.parser.Diff;
import org.gravel.support.parser.MethodNode;
import org.gravel.support.parser.AbstractClassDiff;

public class AddClassDiff extends NewClassDiff implements Cloneable {

	public static AddClassDiff_Factory factory = new AddClassDiff_Factory();

	public static class AddClassDiff_Factory extends NewClassDiff_Factory {

		public AddClassDiff basicNew() {
			AddClassDiff newInstance = new AddClassDiff();
			newInstance.initialize();
			return newInstance;
		}

		@Override
		public AddClassDiff classNode_(final ClassNode _aClassNode) {
			return ((AddClassDiff) this.basicNew().initializeClassNode_(_aClassNode));
		}
	}

	static public AddClassDiff _classNode_(Object receiver, final ClassNode _aClassNode) {
		return factory.classNode_(_aClassNode);
	}

	@Override
	public DiffVisitor accept_(final DiffVisitor _visitor) {
		return _visitor.visitAddClassDiff_(this);
	}

	@Override
	public SystemNode applyOnSystemNode_(final SystemNode _aSystemNode) {
		return _aSystemNode.withClassDescriptionNode_(_classNode);
	}

	@Override
	public AddClassDiff beStatic() {
		return this.copy().pvtSetStatic_(true);
	}

	@Override
	public AddClassDiff beStatic_(final boolean _aBoolean) {
		if (_aBoolean && (!this.isStatic())) {
			return AddClassDiff.this.beStatic();
		}
		return this;
	}

	public AddClassDiff copy() {
		try {
			AddClassDiff _temp1 = (AddClassDiff) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public AddClassDiff_Factory factory() {
		return factory;
	}

	@Override
	public AddClassDiff initialize() {
		super.initialize();
		_isStatic = this.isStaticDefault();
		_cache = new java.util.IdentityHashMap<AbstractClassDiff, Boolean>();
		return this;
	}

	@Override
	public AddClassDiff initializeClassNode_(final ClassNode _aClassNode) {
		_classNode = _aClassNode;
		this.initialize();
		return this;
	}

	@Override
	public boolean isStaticDefault() {
		return (_classNode != null) && _classNode.isNilClass();
	}

	@Override
	public AddClassDiff printDescriptionOn_(final StringBuilder _aStream) {
		_aStream.append(_classNode.toString());
		return this;
	}

	@Override
	public AddClassDiff pvtSetStatic_(final boolean _aBoolean) {
		_isStatic = _aBoolean;
		return this;
	}

	@Override
	public Diff withDiff_(final Diff _aDiff) {
		return _aDiff.withAddClassDiff_(this);
	}

	@Override
	public AddClassDiff withMethodNodes_(final MethodNode[] _anArray) {
		return this.factory().classNode_(_classNode.mergedWithMethods_(_anArray));
	}
}

package org.gravel.support.parser;

/*
	This file is automatically generated. See FX.TService.TService class>>generateWorkspaces
	(C) CosmoCows B.V.
*/

import java.math.BigDecimal;
import java.math.BigInteger;
import org.gravel.support.jvm.NonLocalReturn;
import org.gravel.support.parser.DiffVisitor;
import org.gravel.support.parser.DiffVisitor.DiffVisitor_Factory;
import org.gravel.support.parser.SystemMapping;
import org.gravel.support.parser.SystemMappingCompilerTools;
import org.gravel.support.parser.Diff;
import org.gravel.support.parser.SelectorConverter;
import java.util.List;
import org.gravel.support.parser.Reference;
import org.gravel.support.parser.BoundVariableDeclarationNode;
import org.gravel.support.parser.ClassMapping;
import org.gravel.support.parser.ClassDescriptionNode;
import org.gravel.support.parser.IdentityClassPartMapping;
import org.gravel.support.parser.MethodNode;
import org.gravel.support.parser.ExtensionClassPartMapping;
import java.util.HashMap;
import org.gravel.support.parser.InstVarMapping;
import java.util.Set;
import org.gravel.support.parser.AbstractMethodMapping;
import org.gravel.support.parser.SourceFile;
import org.gravel.support.parser.ClassNode;
import org.gravel.support.parser.MetaclassNode;
import org.gravel.support.parser.PragmaNode;
import org.gravel.support.parser.AbsoluteReference;
import java.util.Map;
import java.util.ArrayList;
import org.gravel.support.parser.SharedDeclarationNode;
import org.gravel.support.parser.ClassPartMapping;
import org.gravel.support.parser.MethodMapping;
import org.gravel.support.parser.Node;
import org.gravel.support.parser.Expression;
import org.gravel.support.parser.SelfNode;
import java.util.HashSet;
import org.gravel.support.parser.NamespaceNode;
import org.gravel.support.parser.AddClassDiff;
import org.gravel.support.parser.AddMethodDiff;
import org.gravel.support.parser.BranchDiff;
import org.gravel.support.parser.ClassDiffs;
import org.gravel.support.parser.EmptyDiff;
import org.gravel.support.parser.RemoveClassDiff;
import org.gravel.support.parser.UpdateClassDiff;
import org.gravel.support.parser.UpdateMethodDiff;
import org.gravel.support.parser.WrapJavaclassDiff;
import org.gravel.support.parser.AbstractClassDiff;
import org.gravel.support.parser.AddInstVarDiff;
import org.gravel.support.parser.InstVarDiff;
import org.gravel.support.parser.MethodDiff;
import org.gravel.support.parser.NewClassDiff;
import org.gravel.support.parser.RemoveInstVarDiff;
import org.gravel.support.parser.RemoveMethodDiff;

public class SystemMappingUpdater extends DiffVisitor implements Cloneable {

	public static SystemMappingUpdater_Factory factory = new SystemMappingUpdater_Factory();

	SystemMappingCompilerTools _compilerTools;

	SelectorConverter _selectorConverter;

	SystemMapping _systemMapping;

	List<Reference> _toInitialize;

	public static class SystemMappingUpdater_Factory extends DiffVisitor_Factory {

		public SystemMappingUpdater basicNew() {
			SystemMappingUpdater newInstance = new SystemMappingUpdater();
			newInstance.initialize();
			return newInstance;
		}

		public SystemMappingUpdater systemMapping_compilerTools_(final SystemMapping _aSystemMapping, final SystemMappingCompilerTools _aSystemMappingCompilerTools) {
			return this.basicNew().initializeSystemMapping_compilerTools_(_aSystemMapping, _aSystemMappingCompilerTools);
		}

		@Override
		public SystemMappingUpdater visit_(final Diff _aDiff) {
			return ((SystemMappingUpdater) this.basicNew().visit_(_aDiff));
		}
	}

	static public SystemMappingUpdater _systemMapping_compilerTools_(Object receiver, final SystemMapping _aSystemMapping, final SystemMappingCompilerTools _aSystemMappingCompilerTools) {
		return factory.systemMapping_compilerTools_(_aSystemMapping, _aSystemMappingCompilerTools);
	}

	static public SystemMappingUpdater _visit_(Object receiver, final Diff _aDiff) {
		return factory.visit_(_aDiff);
	}

	public BoundVariableDeclarationNode[] allInstVarsForReference_(final Reference _aReference) {
		if (_aReference == null) {
			return new BoundVariableDeclarationNode[] {};
		}
		return _systemMapping.classMappingAtReference_(_aReference).allInstVarsIn_(_systemMapping);
	}

	public Class classForSuperOf_(final Reference _aReference) {
		final ClassMapping _superMapping;
		final Class _superclass;
		_superMapping = _systemMapping.classMappingAtReference_(_aReference);
		_superclass = _superMapping.identityClass();
		if (_superclass.isInterface()) {
			return SystemMappingUpdater.this.classForSuperOf_(_superMapping.superclassReference());
		}
		return _superclass;
	}

	public SystemMappingUpdater compileClassDescriptionNodeNonStatic_(final ClassDescriptionNode _aClassDescriptionNode) {
		final Class _identityClass;
		final IdentityClassPartMapping _identityMapping;
		final MethodNode[] _localLinkedMethods;
		final Reference _superclassReference;
		Class _superclass;
		final MethodNode[] _allMethods;
		final BoundVariableDeclarationNode[] _superInstVars;
		final BoundVariableDeclarationNode[] _allInstVars;
		_allMethods = this.methods_withExtraMethods_(_aClassDescriptionNode.methods(), this.extraMethodsFor_(_aClassDescriptionNode));
		_superclassReference = _aClassDescriptionNode.superclassReference();
		if (_superclassReference == null) {
			org.gravel.support.jvm.ObjectExtensions.assert_(SystemMappingUpdater.this, _aClassDescriptionNode.reference().isMeta());
			_superclass = _compilerTools.javaClassSuperclass();
		} else {
			_superclass = SystemMappingUpdater.this.classForSuperOf_(_superclassReference);
		}
		_superInstVars = this.allInstVarsForReference_(_superclassReference);
		_allInstVars = org.gravel.support.jvm.ArrayExtensions.copyWithAll_(_superInstVars, _aClassDescriptionNode.boundInstVars());
		_localLinkedMethods = this.localLinkMethods_instVars_ownerReference_(_allMethods, _allInstVars, _aClassDescriptionNode.reference());
		_identityClass = _compilerTools.compileJavaClass_name_superclass_methods_instVars_allInstVars_instVarOwners_sourceFile_(_aClassDescriptionNode.reference(), _compilerTools.referenceAsClassName_(_aClassDescriptionNode.reference()), _superclass, _localLinkedMethods, _aClassDescriptionNode.boundInstVars(), _allInstVars, this.getInstVarOwners_(_superInstVars), _aClassDescriptionNode.findSourceFile());
		_identityMapping = ((IdentityClassPartMapping) this.linkMethods_in_identityClass_to_isStatic_(_allMethods, _identityClass, _identityClass, IdentityClassPartMapping.factory.javaClass_isGenerated_(_identityClass, true), false));
		_systemMapping.addClassMapping_(ClassMapping.factory.identityMapping_extensions_instVarMappings_classNode_(_identityMapping, new ExtensionClassPartMapping[] {}, new java.util.HashMap<String, InstVarMapping>(), _aClassDescriptionNode));
		return this;
	}

	public SystemMappingUpdater compileClassDescriptionNodeStatic_(final ClassDescriptionNode _aClassDescriptionNode) {
		final Class _extensionClass;
		IdentityClassPartMapping _identityMapping;
		final MethodNode[] _localLinkedMethods;
		final MethodNode[] _allMethods;
		final BoundVariableDeclarationNode[] _boundInstVars;
		final BoundVariableDeclarationNode[] _allInstVars;
		final BoundVariableDeclarationNode[] _superInstVars;
		_allMethods = this.methods_withExtraMethods_(_aClassDescriptionNode.methods(), this.extraMethodsFor_(_aClassDescriptionNode));
		_boundInstVars = _aClassDescriptionNode.boundInstVars();
		_superInstVars = this.allInstVarsForReference_(_aClassDescriptionNode.superclassReference());
		_allInstVars = org.gravel.support.jvm.ArrayExtensions.copyWithAll_(_superInstVars, _boundInstVars);
		_localLinkedMethods = this.localLinkMethods_instVars_ownerReference_(_allMethods, _allInstVars, _aClassDescriptionNode.reference());
		_extensionClass = _compilerTools.compileExtensionJavaClass_prefix_methods_identityClass_instVars_allInstVars_instVarOwners_sourceFile_(_aClassDescriptionNode.reference(), _compilerTools.referenceAsClassName_(_aClassDescriptionNode.reference()), _localLinkedMethods, null, _boundInstVars, _allInstVars, new java.util.HashMap<Reference, Class>(), _aClassDescriptionNode.findSourceFile());
		_identityMapping = IdentityClassPartMapping.factory.javaClass_isGenerated_(_aClassDescriptionNode.isNilClass() ? null : _extensionClass, true);
		_identityMapping = ((IdentityClassPartMapping) this.linkMethods_in_identityClass_to_isStatic_(_allMethods, _extensionClass, _extensionClass, _identityMapping, true));
		_systemMapping.addClassMapping_(ClassMapping.factory.identityMapping_extensions_instVarMappings_classNode_(_identityMapping, new ExtensionClassPartMapping[] {}, new java.util.HashMap<String, InstVarMapping>(), _aClassDescriptionNode));
		return this;
	}

	public SystemMappingUpdater compileClassDescriptionNode_(final ClassDescriptionNode _aClassDescriptionNode) {
		return this.compileClassDescriptionNode_isStatic_(_aClassDescriptionNode, false);
	}

	public SystemMappingUpdater compileClassDescriptionNode_isStatic_(final ClassDescriptionNode _aClassDescriptionNode, final boolean _isStatic) {
		if (_isStatic) {
			SystemMappingUpdater.this.compileClassDescriptionNodeStatic_(_aClassDescriptionNode);
		} else {
			SystemMappingUpdater.this.compileClassDescriptionNodeNonStatic_(_aClassDescriptionNode);
		}
		return this;
	}

	public SystemMappingUpdater compiledMethodNodesIn_do_(final Reference _superclassReference, final org.gravel.support.jvm.Block1<Object, MethodNode> _aBlock) {
		final ClassMapping _superMapping;
		final Class _sc;
		final java.util.Set<org.gravel.core.Symbol> _allSelectors;
		if (_superclassReference == null) {
			return SystemMappingUpdater.this;
		}
		_superMapping = _systemMapping.classMappingAtReference_(_superclassReference);
		_allSelectors = _superMapping.allSelectorsIn_(_systemMapping);
		_sc = _superMapping.identityClass();
		_compilerTools.methodNamesIn_do_(_sc, new org.gravel.support.jvm.Block1<Object, String>() {

			@Override
			public Object value_(final String _methodName) {
				final org.gravel.core.Symbol _sel;
				_sel = _selectorConverter.functionNameAsSelector_(_methodName);
				if (_allSelectors.contains(_sel)) {
					final AbstractMethodMapping _methodMapping;
					_methodMapping = _systemMapping.methodMappingFrom_selector_(_superMapping, _sel);
					if ((_methodMapping != null) && (_methodMapping.methodNode() != null)) {
						return _aBlock.value_(_methodMapping.methodNode());
					}
				}
				return SystemMappingUpdater.this;
			}
		});
		return this;
	}

	public ExtensionClassPartMapping compileExtensionClassPartMapping_methods_identityClass_instVars_sourceFile_(final ClassDescriptionNode _aClassDescriptionNode, final MethodNode[] _extensionMethods, final Class _identityClass, final BoundVariableDeclarationNode[] _boundInstVars, final SourceFile _sourceFile) {
		final Class _extensionClass;
		final MethodNode[] _localLinkedMethods;
		final String _namePrefix;
		final BoundVariableDeclarationNode[] _superInstVars;
		final BoundVariableDeclarationNode[] _allInstVars;
		_namePrefix = _compilerTools.referenceAsClassName_(_aClassDescriptionNode.reference());
		_superInstVars = this.allInstVarsForReference_(_aClassDescriptionNode.superclassReference());
		_allInstVars = org.gravel.support.jvm.ArrayExtensions.copyWithAll_(_superInstVars, _boundInstVars);
		_localLinkedMethods = this.localLinkMethods_instVars_ownerReference_(_extensionMethods, _allInstVars, _aClassDescriptionNode.reference());
		_extensionClass = _compilerTools.compileExtensionJavaClass_prefix_methods_identityClass_instVars_allInstVars_instVarOwners_sourceFile_(_aClassDescriptionNode.reference(), _namePrefix, _localLinkedMethods, _identityClass, _boundInstVars, _allInstVars, this.getInstVarOwners_(_allInstVars), _sourceFile);
		return ((ExtensionClassPartMapping) this.linkMethods_in_identityClass_to_isStatic_(_extensionMethods, _extensionClass, _identityClass, ExtensionClassPartMapping.factory.javaClass_isGenerated_(_extensionClass, true), true));
	}

	public SystemMappingCompilerTools compilerTools() {
		return _compilerTools;
	}

	public SystemMappingUpdater copy() {
		try {
			SystemMappingUpdater _temp1 = (SystemMappingUpdater) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public MethodNode[] extraMethodsForClassNode_(final ClassNode _aClassNode) {
		return org.gravel.support.jvm.ArrayFactory.with_(UnaryMethodNode.factory.selector_body_returnType_pragmas_protocol_("class", SequenceNode.factory.statement_(ReturnNode.factory.value_(VariableNode.factory.name_(_aClassNode.name().asString()))), null, new PragmaNode[] {}, "extra"));
	}

	public MethodNode[] extraMethodsForMetaclassNode_(final MetaclassNode _aMetaclassNode) {
		AbsoluteReference _javaClassReference;
		_javaClassReference = _aMetaclassNode.classNode().javaClassReference();
		if (_javaClassReference == null) {
			_javaClassReference = _aMetaclassNode.reference().nonmeta();
		}
		return org.gravel.support.jvm.ArrayFactory.with_(UnaryMethodNode.factory.selector_body_returnType_pragmas_protocol_("basicNew", SequenceNode.factory.statement_(ReturnNode.factory.value_(InstanceCreationNode.factory.reference_(_javaClassReference))), null, new PragmaNode[] {}, "extra"));
	}

	public MethodNode[] extraMethodsFor_(final ClassDescriptionNode _aClassDescriptionNode) {
		if (_aClassDescriptionNode.isClassNode()) {
			return SystemMappingUpdater.this.extraMethodsForClassNode_(((ClassNode) _aClassDescriptionNode));
		} else {
			return SystemMappingUpdater.this.extraMethodsForMetaclassNode_(((MetaclassNode) _aClassDescriptionNode));
		}
	}

	public SystemMappingUpdater_Factory factory() {
		return factory;
	}

	public SourceFile findSourceFile_(final MethodNode[] _methodNodes) {
		for (final MethodNode _each : _methodNodes) {
			if (_each.sourcePosition() != null) {
				return _each.sourcePosition().sourceFile();
			}
		}
		return null;
	}

	public Map<Reference, Class> getInstVarOwners_(final BoundVariableDeclarationNode[] _allInstVars) {
		final Map<Reference, Class> _instVarOwners;
		_instVarOwners = new java.util.HashMap<Reference, Class>();
		for (final BoundVariableDeclarationNode _each : _allInstVars) {
			Reference _temp1 = _each.ownerType();
			Class _temp2 = _instVarOwners.get(_temp1);
			if (_temp2 == null) {
				Class _temp3 = _systemMapping.classMappingAtReference_(_each.ownerType()).identityClass();
				_instVarOwners.put(_temp1, _temp3);
				_temp2 = _temp3;
			}
		}
		return _instVarOwners;
	}

	@Override
	public SystemMappingUpdater initialize() {
		_selectorConverter = SelectorConverter.factory.basicNew();
		_toInitialize = new java.util.ArrayList();
		return this;
	}

	public SystemMappingUpdater initializeClassShareds_(final MetaclassNode _aMetaclassNode) {
		for (final SharedDeclarationNode _sharedVariable : _aMetaclassNode.sharedVariables()) {
			final AbsoluteReference _reference;
			_reference = _aMetaclassNode.reference().nonmeta().$slash$(org.gravel.core.Symbol.value(_sharedVariable.name()));
			_systemMapping.singletonAtReference_initialize_(_reference, _sharedVariable);
		}
		return this;
	}

	public SystemMappingUpdater initializeSystemMapping_compilerTools_(final SystemMapping _aSystemMapping, final SystemMappingCompilerTools _aSystemMappingCompilerTools) {
		_systemMapping = _aSystemMapping;
		_compilerTools = _aSystemMappingCompilerTools;
		this.initialize();
		return this;
	}

	public SystemMappingUpdater link() {
		_systemMapping.classMappingsDo_(new org.gravel.support.jvm.Block1<Object, ClassMapping>() {

			@Override
			public Object value_(final ClassMapping _classMapping) {
				if (_classMapping.classNode().isMeta()) {
					SystemMappingUpdater.this.initializeClassShareds_(((MetaclassNode) _classMapping.classNode()));
				}
				return _compilerTools.linkInNamespace_systemMapping_(_classMapping, _systemMapping);
			}
		});
		_compilerTools.resetCallsites();
		_systemMapping.namespaceGlobalsAndInitializersDo_(new org.gravel.support.jvm.Block2<Object, AbsoluteReference, SharedDeclarationNode>() {

			@Override
			public Object value_value_(final AbsoluteReference _reference, final SharedDeclarationNode _sharedVariable) {
				return _systemMapping.singletonAtReference_initialize_(_reference, _sharedVariable);
			}
		});
		for (final Reference _ref : _toInitialize) {
			_compilerTools.initializeClass_systemMapping_(_systemMapping.classMappingAtReference_(_ref), _systemMapping);
		}
		_toInitialize = new java.util.ArrayList();
		return this;
	}

	public ClassPartMapping linkMethods_in_identityClass_to_isStatic_(final MethodNode[] _methods, final Class _javaClass, final Class _identityClass, final ClassPartMapping _cpm, final boolean _isStatic) {
		final ClassPartMapping[] _ecm;
		_ecm = new ClassPartMapping[1];
		_ecm[0] = _cpm;
		for (final MethodNode _m : _methods) {
			final String _fn;
			final java.lang.invoke.MethodHandle _methodHandle;
			final org.gravel.core.Symbol _selector;
			_selector = org.gravel.core.Symbol.value(_m.selector());
			_fn = _selectorConverter.selectorAsFunctionName_(_selector);
			_methodHandle = _compilerTools.methodHandleAt_numArgs_in_identityClass_isStatic_(_fn, _selector.numArgs(), _javaClass, _identityClass, _isStatic);
			_ecm[0] = _ecm[0].withMethodMapping_(((MethodMapping) MethodMapping.factory.methodNode_methodHandle_definingClass_(_m, _methodHandle, _javaClass)));
		}
		return _ecm[0];
	}

	public MethodNode[] localLinkMethods_instVars_ownerReference_(final MethodNode[] _methods, final BoundVariableDeclarationNode[] _instVars, final Reference _ownerReference) {
		final SelfNode _owner;
		_owner = SelfNode.factory.basicNew();
		return org.gravel.support.jvm.ArrayExtensions.collect_(_methods, ((org.gravel.support.jvm.Block1<MethodNode, MethodNode>) (new org.gravel.support.jvm.Block1<MethodNode, MethodNode>() {

			@Override
			public MethodNode value_(final MethodNode _m) {
				final MethodNode _fieldAccessed;
				_fieldAccessed = ((MethodNode) SystemMappingUpdater.this.localLink_instVars_ownerReference_owner_(_m, _instVars, _ownerReference, _owner));
				return (MethodNode) _fieldAccessed;
			}
		})));
	}

	public Node localLink_instVarNames_owner_ownerReference_(final Node _node, final String[] _instVarNames, final Expression _owner, final Reference _ownerReference) {
		final Node _intermediate;
		final Node _nonLocal;
		final Node _holderized;
		final Node _fieldAccessed;
		_intermediate = IntermediateNodeRewriter.factory.visit_(_node);
		_nonLocal = NonLocalReturnRewriter.factory.nlrMarker_(_compilerTools.nextNlrMarker()).visit_(_intermediate);
		_holderized = NonLocalTempWritesToHolderConverter.factory.visit_(_nonLocal);
		_fieldAccessed = VariableAccessToFieldAccessConverter.factory.instVarNames_owner_ownerReference_(_instVarNames, _owner, _ownerReference).visit_(_holderized);
		return _fieldAccessed;
	}

	public Node localLink_instVars_ownerReference_owner_(final Node _node, final BoundVariableDeclarationNode[] _instVars, final Reference _ownerReference, final Expression _owner) {
		final Node _intermediate;
		final Node _nonLocal;
		final Node _holderized;
		final Node _fieldAccessed;
		final String[] _instVarNames;
		_instVarNames = org.gravel.support.jvm.ArrayExtensions.collect_(_instVars, ((org.gravel.support.jvm.Block1<String, BoundVariableDeclarationNode>) (new org.gravel.support.jvm.Block1<String, BoundVariableDeclarationNode>() {

			@Override
			public String value_(final BoundVariableDeclarationNode _each) {
				return (String) _each.name();
			}
		})));
		_intermediate = IntermediateNodeRewriter.factory.visit_(_node);
		_nonLocal = NonLocalReturnRewriter.factory.nlrMarker_(_compilerTools.nextNlrMarker()).visit_(_intermediate);
		_holderized = NonLocalTempWritesToHolderConverter.factory.visit_(_nonLocal);
		_fieldAccessed = VariableAccessToFieldAccessConverter.factory.instVarNames_owner_ownerReference_(_instVarNames, _owner, _ownerReference).visit_(_holderized);
		return _fieldAccessed;
	}

	public MethodNode[] methodsToRecompile_in_(final MethodNode[] _allMethods, final Reference _superclassReference) {
		final List<MethodNode> _methodsToRecompile;
		final java.util.Set<String> _selectors;
		_selectors = new java.util.HashSet();
		_methodsToRecompile = new java.util.ArrayList();
		for (final MethodNode _each : _allMethods) {
			_selectors.add(_each.selector());
		}
		this.compiledMethodNodesIn_do_(_superclassReference, new org.gravel.support.jvm.Block1<Object, MethodNode>() {

			@Override
			public Object value_(final MethodNode _methodNode) {
				MethodNode _clean;
				if (!_selectors.contains(_methodNode.selector())) {
					_clean = ((MethodNode) _methodNode.withoutSourcePointers());
					return _methodsToRecompile.add(_clean);
				}
				return SystemMappingUpdater.this;
			}
		});
		return _methodsToRecompile.toArray(new MethodNode[_methodsToRecompile.size()]);
	}

	public MethodNode[] methods_withExtraMethods_(final MethodNode[] _methods, final MethodNode[] _extraMethods) {
		final java.util.Set<String> _selectors;
		final List<MethodNode> _n;
		_selectors = new java.util.HashSet();
		_n = new java.util.ArrayList();
		for (final MethodNode _each : _methods) {
			if (!_selectors.contains(_each.selector())) {
				_selectors.add(_each.selector());
				_n.add(_each);
			}
		}
		for (final MethodNode _each : _extraMethods) {
			if (!_selectors.contains(_each.selector())) {
				_selectors.add(_each.selector());
				_n.add(_each);
			}
		}
		return _n.toArray(new MethodNode[_n.size()]);
	}

	public SystemMappingUpdater setNamespaceNodes_(final Map<Reference, NamespaceNode> _aDictionary) {
		_systemMapping.setNamespaceNodes_(_aDictionary);
		return this;
	}

	public SystemMapping systemMapping() {
		return _systemMapping;
	}

	@Override
	public SystemMappingUpdater visitAbstractClassDiff_(final AbstractClassDiff _anObject) {
		return this.visitDiff_(_anObject);
	}

	@Override
	public SystemMappingUpdater visitAddClassDiff_(final AddClassDiff _anAddClassDiff) {
		this.compileClassDescriptionNode_isStatic_(_anAddClassDiff.classNode(), _anAddClassDiff.isStatic());
		this.compileClassDescriptionNode_(_anAddClassDiff.classNode().metaclassNode());
		_toInitialize.add(_anAddClassDiff.classNode().metaclassNode().reference());
		return this;
	}

	@Override
	public SystemMappingUpdater visitAddInstVarDiff_(final AddInstVarDiff _anObject) {
		return this.visitInstVarDiff_(_anObject);
	}

	@Override
	public SystemMappingUpdater visitAddMethodDiff_(final AddMethodDiff _anObject) {
		return this.visit_(_anObject.asClassDiff());
	}

	@Override
	public SystemMappingUpdater visitBranchDiff_(final BranchDiff _aBranchDiff) {
		this.visit_(_aBranchDiff.root());
		for (final Diff _ch : _aBranchDiff.children()) {
			SystemMappingUpdater.this.visit_(_ch);
		}
		return this;
	}

	@Override
	public SystemMappingUpdater visitClassDiffs_(final ClassDiffs _aClassDiffs) {
		for (final Diff _each : _aClassDiffs.classDiffs()) {
			SystemMappingUpdater.this.visit_(_each);
		}
		return this;
	}

	@Override
	public SystemMappingUpdater visitDiff_(final Diff _anObject) {
		throw DiffVisitorError.factory.basicNew();
	}

	@Override
	public SystemMappingUpdater visitEmptyDiff_(final EmptyDiff _anObject) {
		return this;
	}

	@Override
	public SystemMappingUpdater visitInstVarDiff_(final InstVarDiff _anObject) {
		return this.visitDiff_(_anObject);
	}

	@Override
	public SystemMappingUpdater visitMethodDiff_(final MethodDiff _anObject) {
		return this.visitDiff_(_anObject);
	}

	@Override
	public SystemMappingUpdater visitNewClassDiff_(final NewClassDiff _anObject) {
		return this.visitAbstractClassDiff_(_anObject);
	}

	@Override
	public SystemMappingUpdater visitRemoveClassDiff_(final RemoveClassDiff _anObject) {
		return this;
	}

	@Override
	public SystemMappingUpdater visitRemoveInstVarDiff_(final RemoveInstVarDiff _anObject) {
		return this.visitInstVarDiff_(_anObject);
	}

	@Override
	public SystemMappingUpdater visitRemoveMethodDiff_(final RemoveMethodDiff _anObject) {
		return this.visitMethodDiff_(_anObject);
	}

	@Override
	public SystemMappingUpdater visitUpdateClassDiff_(final UpdateClassDiff _anUpdateClassDiff) {
		final ExtensionClassPartMapping _ecm;
		ClassMapping _cm;
		final ClassDescriptionNode _ncn;
		final MethodNode[] _methods;
		_cm = _systemMapping.classMappingAtReference_(_anUpdateClassDiff.reference());
		_cm = ((ClassMapping) org.gravel.support.jvm.ArrayExtensions.inject_into_(_anUpdateClassDiff.updatedMethodNodes(), _cm, ((org.gravel.support.jvm.Block2<ClassMapping, ClassMapping, MethodNode>) (new org.gravel.support.jvm.Block2<ClassMapping, ClassMapping, MethodNode>() {

			@Override
			public ClassMapping value_value_(final ClassMapping _classMapping, final MethodNode _methodNode) {
				return (ClassMapping) _classMapping.withoutMethodMapping_(_methodNode.selector());
			}
		}))));
		_cm = ((ClassMapping) org.gravel.support.jvm.ArrayExtensions.inject_into_(_anUpdateClassDiff.deletedSelectors(), _cm, ((org.gravel.support.jvm.Block2<ClassMapping, ClassMapping, String>) (new org.gravel.support.jvm.Block2<ClassMapping, ClassMapping, String>() {

			@Override
			public ClassMapping value_value_(final ClassMapping _classMapping, final String _selector) {
				return (ClassMapping) _classMapping.withoutMethodMapping_(_selector);
			}
		}))));
		_ncn = _anUpdateClassDiff.applyOnClassNode_(_cm.classNode());
		_methods = org.gravel.support.jvm.ArrayExtensions.copyWithAll_(_anUpdateClassDiff.methodNodes(), _anUpdateClassDiff.updatedMethodNodes());
		_ecm = this.compileExtensionClassPartMapping_methods_identityClass_instVars_sourceFile_(_ncn, _methods, _cm.identityClass(), _cm.classNode().boundInstVars(), this.findSourceFile_(_anUpdateClassDiff.methodNodes()));
		_systemMapping.addClassMapping_(_cm.withClassNode_(_ncn).withExtension_(_ecm));
		return this;
	}

	@Override
	public SystemMappingUpdater visitUpdateMethodDiff_(final UpdateMethodDiff _anObject) {
		return this.visit_(_anObject.asClassDiff());
	}

	@Override
	public SystemMappingUpdater visitWrapJavaclassDiff_(final WrapJavaclassDiff _aWrapJavaclassDiff) {
		final IdentityClassPartMapping _identityMapping;
		final ExtensionClassPartMapping _ecm;
		final MethodNode[] _allMethods;
		_identityMapping = IdentityClassPartMapping.factory.javaClass_isGenerated_(_compilerTools.findJavaClass_(_aWrapJavaclassDiff.classNode().javaClassPath()), false);
		_allMethods = this.methods_withExtraMethods_(_aWrapJavaclassDiff.classNode().methods(), this.extraMethodsFor_(_aWrapJavaclassDiff.classNode()));
		_ecm = this.compileExtensionClassPartMapping_methods_identityClass_instVars_sourceFile_(_aWrapJavaclassDiff.classNode(), _allMethods, _identityMapping.javaClass(), new BoundVariableDeclarationNode[] {}, _aWrapJavaclassDiff.classNode().findSourceFile());
		_systemMapping.addClassMapping_(ClassMapping.factory.identityMapping_extensions_instVarMappings_classNode_(_identityMapping, org.gravel.support.jvm.ArrayFactory.with_(_ecm), new java.util.HashMap<String, InstVarMapping>(), _aWrapJavaclassDiff.classNode()));
		this.compileClassDescriptionNode_(_aWrapJavaclassDiff.classNode().metaclassNode());
		_toInitialize.add(_aWrapJavaclassDiff.classNode().metaclassNode().reference());
		return this;
	}

	@Override
	public SystemMappingUpdater visit_(final Diff _anObject) {
		_anObject.accept_(this);
		return this;
	}
}

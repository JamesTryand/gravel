package org.gravel.support.parser;

/*
	This file is automatically generated. See FX.TService.TService class>>generateWorkspaces
	(C) CosmoCows B.V.
*/

import java.math.BigDecimal;
import java.math.BigInteger;
import org.gravel.support.jvm.NonLocalReturn;
import org.gravel.support.parser.BooleanBinaryNode;
import org.gravel.support.parser.BooleanBinaryNode.BooleanBinaryNode_Factory;
import org.gravel.support.parser.Expression;
import org.gravel.support.parser.SequenceNode;
import org.gravel.support.parser.NodeVisitor;
import org.gravel.support.parser.Node;
import org.gravel.support.parser.SourcePosition;

public class BooleanAndNode extends BooleanBinaryNode implements Cloneable {

	public static BooleanAndNode_Factory factory = new BooleanAndNode_Factory();

	public static class BooleanAndNode_Factory extends BooleanBinaryNode_Factory {

		public BooleanAndNode basicNew() {
			BooleanAndNode newInstance = new BooleanAndNode();
			newInstance.initialize();
			return newInstance;
		}

		@Override
		public BooleanAndNode left_right_(final Expression _anUnaryMessageNode, final SequenceNode _aSequenceNode) {
			return ((BooleanAndNode) this.basicNew().initializeLeft_right_(_anUnaryMessageNode, _aSequenceNode));
		}
	}

	static public BooleanAndNode _left_right_(Object receiver, final Expression _anUnaryMessageNode, final SequenceNode _aSequenceNode) {
		return factory.left_right_(_anUnaryMessageNode, _aSequenceNode);
	}

	@Override
	public <X> X accept_(final NodeVisitor<X> _visitor) {
		return _visitor.visitBooleanAndNode_(this);
	}

	@Override
	public BooleanAndNode allNodesDo_(final org.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		this.nodesDo_(new org.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				return _each.withAllNodesDo_(_aBlock);
			}
		});
		return this;
	}

	@Override
	public BooleanAndNode allNodesDo_pruneWhere_(final org.gravel.support.jvm.Block1<Object, Node> _aBlock, final org.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		this.nodesDo_(new org.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				if (!_pruneBlock.value_(_each)) {
					return _each.withAllNodesDo_pruneWhere_(_aBlock, _pruneBlock);
				}
				return BooleanAndNode.this;
			}
		});
		return this;
	}

	public BooleanAndNode copy() {
		try {
			BooleanAndNode _temp1 = (BooleanAndNode) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public BooleanAndNode_Factory factory() {
		return factory;
	}

	@Override
	public BooleanAndNode initializeLeft_right_(final Expression _anUnaryMessageNode, final SequenceNode _aSequenceNode) {
		_left = _anUnaryMessageNode;
		_right = _aSequenceNode;
		this.initialize();
		return this;
	}

	@Override
	public BooleanAndNode innerSourceOn_(final StringBuilder _aStream) {
		_left.sourceOn_(_aStream);
		_aStream.append(" and: [");
		_right.sourceOn_(_aStream);
		_aStream.append("]");
		return this;
	}

	@Override
	public BooleanAndNode localVarNamesDo_(final org.gravel.support.jvm.Block1<Object, String> _aBlock) {
		return this;
	}

	@Override
	public BooleanAndNode prettySourceOn_(final StringBuilder _aStream) {
		SourcePrinter.factory.on_(_aStream).visit_(this);
		return this;
	}

	@Override
	public BooleanAndNode printOn_(final StringBuilder _aStream) {
		final String _title;
		_title = this.factory().toString();
		_aStream.append(org.gravel.support.jvm.CharacterExtensions.isVowel(_title.charAt(0)) ? "an " : "a ");
		_aStream.append(_title);
		_aStream.append('[');
		this.sourceOn_(_aStream);
		_aStream.append(']');
		return this;
	}

	@Override
	public BooleanAndNode pvtSetSourcePosition_(final SourcePosition _aSourcePosition) {
		_sourcePosition = _aSourcePosition;
		return this;
	}

	@Override
	public BooleanAndNode sourceOn_(final StringBuilder _aStream) {
		this.innerSourceOn_(_aStream);
		return this;
	}

	@Override
	public Expression unoptimized() {
		return BinaryMessageNode.factory.receiver_selector_argument_(_left, "and:", BlockNode.factory.body_(_right));
	}

	@Override
	public BooleanAndNode withAllNodesDo_(final org.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		_aBlock.value_(this);
		this.allNodesDo_(_aBlock);
		return this;
	}

	@Override
	public BooleanAndNode withAllNodesDo_pruneWhere_(final org.gravel.support.jvm.Block1<Object, Node> _aBlock, final org.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		_aBlock.value_(this);
		this.allNodesDo_pruneWhere_(_aBlock, _pruneBlock);
		return this;
	}

	@Override
	public BooleanAndNode withSourcePosition_(final SourcePosition _aSourcePosition) {
		if (_sourcePosition == _aSourcePosition) {
			return BooleanAndNode.this;
		}
		return this.copy().pvtSetSourcePosition_(_aSourcePosition);
	}
}

package org.gravel.support.parser;

/*
	This file is automatically generated. See FX.TService.TService class>>generateWorkspaces
	(C) CosmoCows B.V.
*/

import java.math.BigDecimal;
import java.math.BigInteger;
import org.gravel.support.jvm.NonLocalReturn;
import org.gravel.support.parser.Diff;
import org.gravel.support.parser.Diff.Diff_Factory;
import org.gravel.support.parser.DiffVisitor;
import org.gravel.support.parser.AddClassDiff;
import org.gravel.support.parser.BranchDiff;
import org.gravel.support.parser.NewClassDiff;
import org.gravel.support.parser.UpdateClassDiff;
import org.gravel.support.parser.WrapJavaclassDiff;
import org.gravel.support.parser.ClassDiffs;
import org.gravel.support.parser.MethodDiff;

abstract public class AbstractClassDiff extends Diff implements Cloneable {

	public static AbstractClassDiff_Factory factory = new AbstractClassDiff_Factory();

	java.util.IdentityHashMap<AbstractClassDiff, Boolean> _cache;

	boolean _isStatic;

	public static class AbstractClassDiff_Factory extends Diff_Factory {

		public AbstractClassDiff basicNew() {
			throw new RuntimeException("AbstractClassDiff is an abstract class");
		}
	}

	@Override
	public DiffVisitor accept_(final DiffVisitor _visitor) {
		return _visitor.visitAbstractClassDiff_(this);
	}

	public AbstractClassDiff beStatic() {
		return this.copy().pvtSetStatic_(true);
	}

	public AbstractClassDiff beStatic_(final boolean _aBoolean) {
		if (_aBoolean && (!this.isStatic())) {
			return AbstractClassDiff.this.beStatic();
		}
		return this;
	}

	public boolean cachedIsPrereqOrDependent_(final AbstractClassDiff _anAbstractClassDiff) {
		Boolean _temp1 = _cache.get(_anAbstractClassDiff);
		if (_temp1 == null) {
			Boolean _temp2 = this.isPrereqOrDependent_(_anAbstractClassDiff);
			_cache.put(_anAbstractClassDiff, _temp2);
			_temp1 = _temp2;
		}
		return _temp1;
	}

	@Override
	public Integer classDiffsSize() {
		return 1;
	}

	public AbstractClassDiff copy() {
		try {
			AbstractClassDiff _temp1 = (AbstractClassDiff) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public AbstractClassDiff_Factory factory() {
		return factory;
	}

	@Override
	public AbstractClassDiff initialize() {
		super.initialize();
		_isStatic = this.isStaticDefault();
		_cache = new java.util.IdentityHashMap<AbstractClassDiff, Boolean>();
		return this;
	}

	public boolean isPrereqOrDependentOfAddClassDiff_(final AddClassDiff _aClassDiff) {
		return this.isPrereqOrDependentOfNewClassDiff_(_aClassDiff);
	}

	public boolean isPrereqOrDependentOfBranchDiff_(final BranchDiff _aBranchDiff) {
		return this.isPrereqOrDependent_(_aBranchDiff);
	}

	public boolean isPrereqOrDependentOfNewClassDiff_(final NewClassDiff _aClassDiff) {
		return this.isPrereqOrDependent_(_aClassDiff);
	}

	public boolean isPrereqOrDependentOfUpdateClassDiff_(final UpdateClassDiff _anUpdateClassDiff) {
		return this.isPrereqOrDependent_(_anUpdateClassDiff);
	}

	public boolean isPrereqOrDependentOfWrapJavaclassDiff_(final WrapJavaclassDiff _aClassDiff) {
		return this.isPrereqOrDependentOfNewClassDiff_(_aClassDiff);
	}

	public abstract boolean isPrereqOrDependent_(final AbstractClassDiff _anAbstractClassDiff);

	public boolean isStatic() {
		return _isStatic;
	}

	public boolean isStaticDefault() {
		return false;
	}

	@Override
	public abstract AbstractClassDiff printDescriptionOn_(final StringBuilder _aStream);

	public AbstractClassDiff pvtSetStatic_(final boolean _aBoolean) {
		_isStatic = _aBoolean;
		return this;
	}

	@Override
	public Diff withClassDiffs_(final ClassDiffs _aClassDiffs) {
		return _aClassDiffs.withAbstractClassDiff_(this);
	}

	@Override
	public Diff withMethodDiff_(final MethodDiff _aMethodDiff) {
		return this.withDiff_(_aMethodDiff.asClassDiff());
	}

	@Override
	public abstract AbstractClassDiff withNewClassDiff_(final NewClassDiff _aNewClassDiff);
}

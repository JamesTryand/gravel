package org.gravel.support.parser;

/*
	This file is automatically generated. See FX.TService.TService class>>generateWorkspaces
	(C) CosmoCows B.V.
*/

import java.math.BigDecimal;
import java.math.BigInteger;
import org.gravel.support.jvm.NonLocalReturn;
import java.util.Map;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.*;

public class SelectorConverter extends Object implements Cloneable {

	public static SelectorConverter_Factory factory = new SelectorConverter_Factory();

	Map<org.gravel.core.Symbol, String> _map;

	Map<String, org.gravel.core.Symbol> _reverseMap;

	Map<Character, String> _specialCharacters;

	Map<String, Character> _specialCharactersReverse;

	public static class SelectorConverter_Factory extends org.gravel.support.jvm.SmalltalkFactory {

		public SelectorConverter basicNew() {
			SelectorConverter newInstance = new SelectorConverter();
			newInstance.initialize();
			return newInstance;
		}

		public String selectorAsFunctionName_(final String _aSymbolOrString) {
			return this.basicNew().selectorAsFunctionName_(org.gravel.core.Symbol.value(_aSymbolOrString));
		}
	}

	static public String _selectorAsFunctionName_(Object receiver, final String _aSymbolOrString) {
		return factory.selectorAsFunctionName_(_aSymbolOrString);
	}

	public SelectorConverter addSelector_functionName_(final org.gravel.core.Symbol _sel, final String _fn) {
		_map.put(_sel, _fn);
		_reverseMap.put(_fn, _sel);
		return this;
	}

	public SelectorConverter copy() {
		try {
			SelectorConverter _temp1 = (SelectorConverter) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public org.gravel.core.Symbol decodeSelector_(final String _aString) {
		final java.nio.CharBuffer _str;
		String _directive;
		final StringBuilder _wstr;
		_wstr = org.gravel.support.jvm.WriteStreamFactory.on_(new String());
		_str = org.gravel.support.jvm.ReadStreamFactory.on_(_aString);
		boolean _temp1 = false;
		while (!_temp1) {
			_temp1 = org.gravel.support.jvm.ReadStreamExtensions.atEnd(_str);
			if (!_temp1) {
				final char _ch;
				_ch = org.gravel.support.jvm.ReadStreamExtensions.next(_str);
				if (org.gravel.support.jvm.CharacterExtensions.equals_(_ch, '_')) {
					_wstr.append(':');
				} else {
					if (org.gravel.support.jvm.CharacterExtensions.equals_(_ch, '$')) {
						_directive = org.gravel.support.jvm.ReadStreamExtensions.upTo_(_str, '$');
						_wstr.append(_specialCharactersReverse.get(_directive));
					} else {
						_wstr.append(_ch);
					}
				}
			}
		}
		return org.gravel.core.Symbol.value(_wstr.toString());
	}

	public String encodeSelector_(final org.gravel.core.Symbol _aSymbol) {
		final StringBuilder _wStr;
		final String _str;
		final java.nio.CharBuffer _rstr;
		_str = _aSymbol.asString();
		if (_str.length() == 0) {
			return "$empty";
		}
		_wStr = org.gravel.support.jvm.WriteStreamFactory.on_(new String());
		_rstr = org.gravel.support.jvm.ReadStreamFactory.on_(_str);
		boolean _temp1 = false;
		while (!_temp1) {
			_temp1 = org.gravel.support.jvm.ReadStreamExtensions.atEnd(_rstr);
			if (!_temp1) {
				String _sc;
				final Character _ch;
				_ch = org.gravel.support.jvm.ReadStreamExtensions.next(_rstr);
				if (org.gravel.support.jvm.CharacterExtensions.equals_(_ch, ':')) {
					_wStr.append('_');
				} else {
					String _temp2 = _specialCharacters.get(_ch);
					_sc = ((String) _temp2);
					if (_sc == null) {
						_wStr.append(_ch);
					} else {
						_wStr.append('$');
						_wStr.append(_sc);
						_wStr.append('$');
					}
				}
			}
		}
		return _wStr.toString();
	}

	public SelectorConverter_Factory factory() {
		return factory;
	}

	public org.gravel.core.Symbol functionNameAsSelector_(final String _aString) {
		org.gravel.core.Symbol _temp1 = _reverseMap.get(_aString);
		if (_temp1 == null) {
			_temp1 = this.decodeSelector_(_aString);
		}
		return ((org.gravel.core.Symbol) _temp1);
	}

	public SelectorConverter initialize() {
		this.initializeForStaticLinking_(false);
		return this;
	}

	public SelectorConverter initializeForStaticLinking_(final boolean _aBoolean) {
		this.initializeSpecialCharacters();
		_map = new java.util.HashMap<org.gravel.core.Symbol, String>();
		_reverseMap = new java.util.HashMap<String, org.gravel.core.Symbol>();
		_reverseMap.put("$empty", org.gravel.core.Symbol.value(""));
		if (_aBoolean) {
			SelectorConverter.this.mapForStaticLinking();
		}
		for (final org.gravel.core.Symbol _sym : this.javaReservedKeywords()) {
			SelectorConverter.this.addSelector_functionName_(_sym, "r_" + _sym.asString());
		}
		for (final String _v : org.gravel.support.jvm.SetExtensions.copy(_map.values())) {
			SelectorConverter.this.addSelector_functionName_(org.gravel.core.Symbol.value(_v), "_lit_" + _v);
		}
		return this;
	}

	public SelectorConverter initializeSpecialCharacters() {
		_specialCharacters = new java.util.HashMap<Character, String>();
		_specialCharactersReverse = new java.util.HashMap<String, Character>();
		_specialCharacters.put('~', "tilde");
		_specialCharacters.put('!', "exclamation");
		_specialCharacters.put('@', "at");
		_specialCharacters.put('%', "percent");
		_specialCharacters.put('&', "and");
		_specialCharacters.put('*', "times");
		_specialCharacters.put('-', "minus");
		_specialCharacters.put('+', "plus");
		_specialCharacters.put('=', "equals");
		_specialCharacters.put('|', "pipe");
		_specialCharacters.put('/', "slash");
		_specialCharacters.put('\\', "backslash");
		_specialCharacters.put('<', "less");
		_specialCharacters.put('>', "more");
		_specialCharacters.put(',', "comma");
		_specialCharacters.put('?', "wat");
		_specialCharacters.put('_', "underscore");
		_specialCharacters.put('$', "dollar");
		_specialCharacters.put(':', "_");
		for (final Map.Entry<Character, String> _temp1 : org.gravel.support.jvm.DictionaryExtensions.copy(_specialCharacters).entrySet()) {
			char _k = _temp1.getKey();
			String _v = _temp1.getValue();
			_specialCharactersReverse.put(_v, _k);
		}
		return this;
	}

	public org.gravel.core.Symbol[] javaReservedKeywords() {
		return new org.gravel.core.Symbol[] { org.gravel.core.Symbol.value("abstract"), org.gravel.core.Symbol.value("assert"), org.gravel.core.Symbol.value("boolean"), org.gravel.core.Symbol.value("break"), org.gravel.core.Symbol.value("byte"), org.gravel.core.Symbol.value("case"), org.gravel.core.Symbol.value("catch"), org.gravel.core.Symbol.value("char"), org.gravel.core.Symbol.value("class"), org.gravel.core.Symbol.value("const"), org.gravel.core.Symbol.value("continue"), org.gravel.core.Symbol.value("default"), org.gravel.core.Symbol.value("do"), org.gravel.core.Symbol.value("double"), org.gravel.core.Symbol.value("else"), org.gravel.core.Symbol.value("enum"), org.gravel.core.Symbol.value("extends"), org.gravel.core.Symbol.value("false"), org.gravel.core.Symbol.value("final"), org.gravel.core.Symbol.value("finally"), org.gravel.core.Symbol.value("float"), org.gravel.core.Symbol.value("for"), org.gravel.core.Symbol.value("goto"), org.gravel.core.Symbol.value("if"), org.gravel.core.Symbol.value("implements"), org.gravel.core.Symbol.value("import"), org.gravel.core.Symbol.value("instanceof"), org.gravel.core.Symbol.value("int"), org.gravel.core.Symbol.value("interface"), org.gravel.core.Symbol.value("long"), org.gravel.core.Symbol.value("native"), org.gravel.core.Symbol.value("new"), org.gravel.core.Symbol.value("package"), org.gravel.core.Symbol.value("private"), org.gravel.core.Symbol.value("protected"), org.gravel.core.Symbol.value("public"), org.gravel.core.Symbol.value("return"), org.gravel.core.Symbol.value("short"), org.gravel.core.Symbol.value("static"), org.gravel.core.Symbol.value("strictfp"), org.gravel.core.Symbol.value("super"), org.gravel.core.Symbol.value("switch"), org.gravel.core.Symbol.value("synchronized"), org.gravel.core.Symbol.value("this"), org.gravel.core.Symbol.value("throw"), org.gravel.core.Symbol.value("throws"), org.gravel.core.Symbol.value("transient"), org.gravel.core.Symbol.value("true"), org.gravel.core.Symbol.value("try"), org.gravel.core.Symbol.value("void"), org.gravel.core.Symbol.value("volatile"), org.gravel.core.Symbol.value("wait"), org.gravel.core.Symbol.value("while") };
	}

	public org.gravel.core.Symbol keywordFunctionNameAsSelector_(final String _aString) {
		return org.gravel.core.Symbol.value(org.gravel.support.jvm.ArrayExtensions.joinWith_(org.gravel.support.jvm.StringExtensions.tokensBasedOn_(_aString, '_'), ":"));
	}

	public SelectorConverter mapForStaticLinking() {
		this.addSelector_functionName_(org.gravel.core.Symbol.value("="), "equals");
		this.addSelector_functionName_(org.gravel.core.Symbol.value("hash"), "hashCode");
		this.addSelector_functionName_(org.gravel.core.Symbol.value("copy"), "clone");
		this.addSelector_functionName_(org.gravel.core.Symbol.value("printString"), "toString");
		return this;
	}

	public SelectorConverter postCopy() {
		return this;
	}

	public String selectorAsFunctionName_(final org.gravel.core.Symbol _aSymbol) {
		String _temp1 = _map.get(_aSymbol);
		if (_temp1 == null) {
			_temp1 = this.encodeSelector_(_aSymbol);
		}
		return ((String) _temp1);
	}
}

package org.gravel.support.parser;

/*
	This file is automatically generated. See FX.TService.TService class>>generateWorkspaces
	(C) CosmoCows B.V.
*/

import java.math.BigDecimal;
import java.math.BigInteger;
import org.gravel.support.jvm.NonLocalReturn;
import org.gravel.support.parser.Diff;
import org.gravel.support.parser.Diff.Diff_Factory;
import org.gravel.support.parser.Reference;
import org.gravel.support.parser.VariableDeclarationNode;
import org.gravel.support.parser.DiffVisitor;

abstract public class InstVarDiff extends Diff implements Cloneable {

	public static InstVarDiff_Factory factory = new InstVarDiff_Factory();

	VariableDeclarationNode _instVar;

	Reference _reference;

	public static class InstVarDiff_Factory extends Diff_Factory {

		public InstVarDiff basicNew() {
			throw new RuntimeException("InstVarDiff is an abstract class");
		}

		public InstVarDiff reference_instVar_(final Reference _aReference, final VariableDeclarationNode _instVar) {
			return ((InstVarDiff) this.basicNew().initializeReference_instVar_(_aReference, _instVar));
		}
	}

	static public InstVarDiff _reference_instVar_(Object receiver, final Reference _aReference, final VariableDeclarationNode _instVar) {
		return factory.reference_instVar_(_aReference, _instVar);
	}

	@Override
	public DiffVisitor accept_(final DiffVisitor _visitor) {
		return _visitor.visitInstVarDiff_(this);
	}

	public InstVarDiff copy() {
		try {
			InstVarDiff _temp1 = (InstVarDiff) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public InstVarDiff_Factory factory() {
		return factory;
	}

	public InstVarDiff initializeReference_instVar_(final Reference _aReference, final VariableDeclarationNode _aVariableDeclarationNode) {
		_reference = _aReference;
		_instVar = _aVariableDeclarationNode;
		this.initialize();
		return this;
	}

	public VariableDeclarationNode instVar() {
		return _instVar;
	}

	@Override
	public InstVarDiff printDescriptionOn_(final StringBuilder _aStream) {
		_aStream.append(_reference.toString());
		return this;
	}

	public Reference reference() {
		return _reference;
	}
}

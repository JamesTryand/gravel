package org.gravel.support.parser;

/*
	This file is automatically generated. See FX.TService.TService class>>generateWorkspaces
	(C) CosmoCows B.V.
*/

import java.math.BigDecimal;
import java.math.BigInteger;
import org.gravel.support.jvm.NonLocalReturn;
import org.gravel.support.parser.Diff;
import org.gravel.support.parser.AbstractClassDiff;
import org.gravel.support.parser.AddClassDiff;
import org.gravel.support.parser.AddInstVarDiff;
import org.gravel.support.parser.AddMethodDiff;
import org.gravel.support.parser.BranchDiff;
import org.gravel.support.parser.ClassDiffs;
import org.gravel.support.parser.EmptyDiff;
import org.gravel.support.parser.InstVarDiff;
import org.gravel.support.parser.MethodDiff;
import org.gravel.support.parser.NewClassDiff;
import org.gravel.support.parser.RemoveClassDiff;
import org.gravel.support.parser.RemoveInstVarDiff;
import org.gravel.support.parser.RemoveMethodDiff;
import org.gravel.support.parser.UpdateClassDiff;
import org.gravel.support.parser.UpdateMethodDiff;
import org.gravel.support.parser.WrapJavaclassDiff;

public class DiffVisitor extends Object implements Cloneable {

	public static DiffVisitor_Factory factory = new DiffVisitor_Factory();

	public static class DiffVisitor_Factory extends org.gravel.support.jvm.SmalltalkFactory {

		public DiffVisitor basicNew() {
			DiffVisitor newInstance = new DiffVisitor();
			newInstance.initialize();
			return newInstance;
		}

		public DiffVisitor visit_(final Diff _aDiff) {
			return ((DiffVisitor) this.basicNew().visit_(_aDiff));
		}
	}

	static public DiffVisitor _visit_(Object receiver, final Diff _aDiff) {
		return factory.visit_(_aDiff);
	}

	public DiffVisitor copy() {
		try {
			DiffVisitor _temp1 = (DiffVisitor) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public DiffVisitor_Factory factory() {
		return factory;
	}

	public DiffVisitor initialize() {
		return this;
	}

	public DiffVisitor postCopy() {
		return this;
	}

	public DiffVisitor visitAbstractClassDiff_(final AbstractClassDiff _anObject) {
		return this.visitDiff_(_anObject);
	}

	public DiffVisitor visitAddClassDiff_(final AddClassDiff _anObject) {
		return this.visitNewClassDiff_(_anObject);
	}

	public DiffVisitor visitAddInstVarDiff_(final AddInstVarDiff _anObject) {
		return this.visitInstVarDiff_(_anObject);
	}

	public DiffVisitor visitAddMethodDiff_(final AddMethodDiff _anObject) {
		return this.visitMethodDiff_(_anObject);
	}

	public DiffVisitor visitBranchDiff_(final BranchDiff _anObject) {
		return this.visitAbstractClassDiff_(_anObject);
	}

	public DiffVisitor visitClassDiffs_(final ClassDiffs _anObject) {
		return this.visitAbstractClassDiff_(_anObject);
	}

	public DiffVisitor visitDiff_(final Diff _anObject) {
		throw DiffVisitorError.factory.basicNew();
	}

	public DiffVisitor visitEmptyDiff_(final EmptyDiff _anObject) {
		return this.visitDiff_(_anObject);
	}

	public DiffVisitor visitInstVarDiff_(final InstVarDiff _anObject) {
		return this.visitDiff_(_anObject);
	}

	public DiffVisitor visitMethodDiff_(final MethodDiff _anObject) {
		return this.visitDiff_(_anObject);
	}

	public DiffVisitor visitNewClassDiff_(final NewClassDiff _anObject) {
		return this.visitAbstractClassDiff_(_anObject);
	}

	public DiffVisitor visitRemoveClassDiff_(final RemoveClassDiff _anObject) {
		return this.visitDiff_(_anObject);
	}

	public DiffVisitor visitRemoveInstVarDiff_(final RemoveInstVarDiff _anObject) {
		return this.visitInstVarDiff_(_anObject);
	}

	public DiffVisitor visitRemoveMethodDiff_(final RemoveMethodDiff _anObject) {
		return this.visitMethodDiff_(_anObject);
	}

	public DiffVisitor visitUpdateClassDiff_(final UpdateClassDiff _anObject) {
		return this.visitAbstractClassDiff_(_anObject);
	}

	public DiffVisitor visitUpdateMethodDiff_(final UpdateMethodDiff _anObject) {
		return this.visitMethodDiff_(_anObject);
	}

	public DiffVisitor visitWrapJavaclassDiff_(final WrapJavaclassDiff _anObject) {
		return this.visitNewClassDiff_(_anObject);
	}

	public DiffVisitor visit_(final Diff _anObject) {
		_anObject.accept_(this);
		return this;
	}
}

package org.gravel.support.compiler.ast;

/*
	This file is automatically generated. See FX.TService.TService class>>generateWorkspaces
	(C) CosmoCows B.V.
*/

import java.math.BigDecimal;
import java.math.BigInteger;
import org.gravel.support.jvm.NonLocalReturn;
import org.gravel.support.compiler.ast.NumberLiteralNode;
import org.gravel.support.compiler.ast.NumberLiteralNode.NumberLiteralNode_Factory;
import org.gravel.support.compiler.ast.NodeVisitor;
import org.gravel.support.compiler.ast.Node;
import org.gravel.support.compiler.ast.SourcePrinter;
import org.gravel.support.compiler.ast.SourcePosition;

public class FixedPointLiteralNode extends NumberLiteralNode implements Cloneable {

	public static FixedPointLiteralNode_Factory factory = new FixedPointLiteralNode_Factory();

	java.math.BigDecimal _fixedPoint;

	public static class FixedPointLiteralNode_Factory extends NumberLiteralNode_Factory {

		public FixedPointLiteralNode basicNew() {
			FixedPointLiteralNode newInstance = new FixedPointLiteralNode();
			newInstance.initialize();
			return newInstance;
		}

		public FixedPointLiteralNode fixedPoint_(final java.math.BigDecimal _aFixedPoint) {
			return ((FixedPointLiteralNode) this.basicNew().initializeFixedPoint_(_aFixedPoint));
		}

		public FixedPointLiteralNode integer_fractionString_(final java.math.BigInteger _anInteger, final String _aString) {
			return FixedPointLiteralNode.factory.fixedPoint_(org.gravel.support.jvm.FixedPointExtensions.fromString_(_anInteger.toString() + "." + _aString));
		}
	}

	static public FixedPointLiteralNode _fixedPoint_(Object receiver, final java.math.BigDecimal _aFixedPoint) {
		return factory.fixedPoint_(_aFixedPoint);
	}

	static public FixedPointLiteralNode _integer_fractionString_(Object receiver, final java.math.BigInteger _anInteger, final String _aString) {
		return factory.integer_fractionString_(_anInteger, _aString);
	}

	@Override
	public <X> X accept_(final NodeVisitor<X> _visitor) {
		return _visitor.visitFixedPointLiteralNode_(this);
	}

	@Override
	public FixedPointLiteralNode allNodesDo_(final org.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		this.nodesDo_(new org.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				return _each.withAllNodesDo_(_aBlock);
			}
		});
		return this;
	}

	@Override
	public FixedPointLiteralNode allNodesDo_pruneWhere_(final org.gravel.support.jvm.Block1<Object, Node> _aBlock, final org.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		this.nodesDo_(new org.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				if (!_pruneBlock.value_(_each)) {
					return _each.withAllNodesDo_pruneWhere_(_aBlock, _pruneBlock);
				}
				return FixedPointLiteralNode.this;
			}
		});
		return this;
	}

	public FixedPointLiteralNode copy() {
		try {
			FixedPointLiteralNode _temp1 = (FixedPointLiteralNode) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public FixedPointLiteralNode_Factory factory() {
		return factory;
	}

	public java.math.BigDecimal fixedPoint() {
		return _fixedPoint;
	}

	public FixedPointLiteralNode initializeFixedPoint_(final java.math.BigDecimal _aFixedPoint) {
		_fixedPoint = _aFixedPoint;
		this.initialize();
		return this;
	}

	@Override
	public FixedPointLiteralNode innerSourceOn_(final StringBuilder _aStream) {
		_aStream.append(_fixedPoint.toString() + "s");
		return this;
	}

	@Override
	public boolean isFixedPointLiteralNode() {
		return true;
	}

	@Override
	public FixedPointLiteralNode localVarNamesDo_(final org.gravel.support.jvm.Block1<Object, String> _aBlock) {
		return this;
	}

	@Override
	public FixedPointLiteralNode negated() {
		return FixedPointLiteralNode.factory.fixedPoint_(_fixedPoint.negate());
	}

	@Override
	public FixedPointLiteralNode prettySourceOn_(final StringBuilder _aStream) {
		SourcePrinter.factory.on_(_aStream).visit_(this);
		return this;
	}

	@Override
	public FixedPointLiteralNode printOn_(final StringBuilder _aStream) {
		final String _title;
		_title = this.factory().toString();
		_aStream.append(org.gravel.support.jvm.CharacterExtensions.isVowel(_title.charAt(0)) ? "an " : "a ");
		_aStream.append(_title);
		_aStream.append('[');
		this.sourceOn_(_aStream);
		_aStream.append(']');
		return this;
	}

	@Override
	public FixedPointLiteralNode pvtSetSourcePosition_(final SourcePosition _aSourcePosition) {
		_sourcePosition = _aSourcePosition;
		return this;
	}

	@Override
	public FixedPointLiteralNode sourceOn_(final StringBuilder _aStream) {
		if (!this.needsBrackets()) {
			return FixedPointLiteralNode.this.innerSourceOn_(_aStream);
		}
		_aStream.append('(');
		this.innerSourceOn_(_aStream);
		_aStream.append(')');
		return this;
	}

	@Override
	public java.math.BigDecimal value() {
		return _fixedPoint;
	}

	@Override
	public FixedPointLiteralNode withAllNodesDo_(final org.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		_aBlock.value_(this);
		this.allNodesDo_(_aBlock);
		return this;
	}

	@Override
	public FixedPointLiteralNode withAllNodesDo_pruneWhere_(final org.gravel.support.jvm.Block1<Object, Node> _aBlock, final org.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		_aBlock.value_(this);
		this.allNodesDo_pruneWhere_(_aBlock, _pruneBlock);
		return this;
	}

	@Override
	public FixedPointLiteralNode withSourcePosition_(final SourcePosition _aSourcePosition) {
		if (_sourcePosition == _aSourcePosition) {
			return FixedPointLiteralNode.this;
		}
		return this.copy().pvtSetSourcePosition_(_aSourcePosition);
	}
}
